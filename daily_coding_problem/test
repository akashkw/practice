#!/bin/bash

# Run this to execute files

# Options
# create - create a new file
# debug - run in debug mode
# clean - clean all output files

# set -x

if [ "$(uname)" == "Darwin" ]; then
SCRIPT_PATH=$(cd "$(dirname "$0")"; pwd)
else
SCRIPT_PATH=$(dirname $(readlink -f $0))
fi
cd $SCRIPT_PATH

CC="g++"
STD_FLAG="-std=c++14"
WARNING_FLAGS="-pedantic -Wall -Weffc++ -Wextra"
CFLAGS="$STD_FLAG $WARNING_FLAGS"
GTEST_FLAGS="-lgtest -lgtest_main -pthread"
GDB_FLAGS="-g -O0"

PYTHON="python3"
UNITTEST_FLAGS="-m unittest"

if [ "$#" -eq 1 ]; then
    TARGET_FILE=$1
    if [ "$TARGET_FILE" == "clean" ]; then
        echo Cleaning up...
        rm -f *.out
        rm -f *.pyc
        rm -rf __pycache__
        echo Clean up successful!
        exit
    fi
    EXTENTION="${TARGET_FILE##*.}"
elif [ "$#" -eq 2 ]; then
    TARGET_FILE=$2
    EXTENTION="${TARGET_FILE##*.}"
        case "$1" in
                create)
                    echo "Creating $TARGET_FILE..."
                    case "$EXTENTION" in
                        cpp)
                            cp cpp/template.cpp ./$TARGET_FILE
                            ;;
                        py)
                            cp python/template.py ./$TARGET_FILE
                            ;;
                        java)
                            echo JAVA NOT YET IMPLEMENTED
                            exit 1
                            ;;
                        *)
                            echo INVALID FILE EXTENTION
                            exit 1
                            ;;
                    esac
                    echo "$TARGET_FILE created!"
                    ;;

                debug)
                    echo "Debugging $TARGET_FILE..."
                    case "$EXTENTION" in
                        cpp)
                            $CC $CFLAGS $GDB_FLAGS $TARGET_FILE -o $BASENAME.out $GTEST_FLAGS
                            gdb $BASENAME.out
                            ;;
                        py)
                            echo "Make sure you have uncommented pdb.set_trace() in each test you wish to debug"
                            $PYTHON $UNITTEST_FLAGS $TARGET_FILE
                            ;;
                        java)
                            echo JAVA NOT YET IMPLEMENTED
                            exit 1
                            ;;
                        *)
                            echo INVALID FILE EXTENTION
                            exit 1
                            ;;
                    esac
                    echo "Finished debugging $TARGET_FILE!"
                    ./test clean
                    exit
                    ;;
                *)
                   echo "INVALID USAGE, FIRST PARAM MUST BE {clean|create|debug|file_to_run}"
                   exit 1
                   ;; 
        esac
else
    echo "INVALID USAGE, FIRST PARAM MUST BE {clean|create|debug|file_to_run}"
    exit 1
fi

echo Running $TARGET_FILE
BASENAME="${TARGET_FILE%.*}"
case "$EXTENTION" in
    cpp)
        $CC $CFLAGS $TARGET_FILE -o $BASENAME.out $GTEST_FLAGS
        ./$BASENAME.out
        ;;
    py)
        $PYTHON $UNITTEST_FLAGS $TARGET_FILE
        ;;
    java)
        echo JAVA NOT YET IMPLEMENTED
        exit 1
        ;;
    *)
        echo INVALID FILE EXTENTION
        exit 1
        ;;
esac
echo Finished running $TARGET_FILE
./test clean
